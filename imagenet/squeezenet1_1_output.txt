=> creating model 'squeezenet1_1'
=> Dummy data is used!
module.features.0.weight torch.Size([64, 3, 3, 3])
module.features.0.bias torch.Size([64])
module.features.3.squeeze.weight torch.Size([16, 64, 1, 1])
module.features.3.squeeze.bias torch.Size([16])
module.features.3.expand1x1.weight torch.Size([64, 16, 1, 1])
module.features.3.expand1x1.bias torch.Size([64])
module.features.3.expand3x3.weight torch.Size([64, 16, 3, 3])
module.features.3.expand3x3.bias torch.Size([64])
module.features.4.squeeze.weight torch.Size([16, 128, 1, 1])
module.features.4.squeeze.bias torch.Size([16])
module.features.4.expand1x1.weight torch.Size([64, 16, 1, 1])
module.features.4.expand1x1.bias torch.Size([64])
module.features.4.expand3x3.weight torch.Size([64, 16, 3, 3])
module.features.4.expand3x3.bias torch.Size([64])
module.features.6.squeeze.weight torch.Size([32, 128, 1, 1])
module.features.6.squeeze.bias torch.Size([32])
module.features.6.expand1x1.weight torch.Size([128, 32, 1, 1])
module.features.6.expand1x1.bias torch.Size([128])
module.features.6.expand3x3.weight torch.Size([128, 32, 3, 3])
module.features.6.expand3x3.bias torch.Size([128])
module.features.7.squeeze.weight torch.Size([32, 256, 1, 1])
module.features.7.squeeze.bias torch.Size([32])
module.features.7.expand1x1.weight torch.Size([128, 32, 1, 1])
module.features.7.expand1x1.bias torch.Size([128])
module.features.7.expand3x3.weight torch.Size([128, 32, 3, 3])
module.features.7.expand3x3.bias torch.Size([128])
module.features.9.squeeze.weight torch.Size([48, 256, 1, 1])
module.features.9.squeeze.bias torch.Size([48])
module.features.9.expand1x1.weight torch.Size([192, 48, 1, 1])
module.features.9.expand1x1.bias torch.Size([192])
module.features.9.expand3x3.weight torch.Size([192, 48, 3, 3])
module.features.9.expand3x3.bias torch.Size([192])
module.features.10.squeeze.weight torch.Size([48, 384, 1, 1])
module.features.10.squeeze.bias torch.Size([48])
module.features.10.expand1x1.weight torch.Size([192, 48, 1, 1])
module.features.10.expand1x1.bias torch.Size([192])
module.features.10.expand3x3.weight torch.Size([192, 48, 3, 3])
module.features.10.expand3x3.bias torch.Size([192])
module.features.11.squeeze.weight torch.Size([64, 384, 1, 1])
module.features.11.squeeze.bias torch.Size([64])
module.features.11.expand1x1.weight torch.Size([256, 64, 1, 1])
module.features.11.expand1x1.bias torch.Size([256])
module.features.11.expand3x3.weight torch.Size([256, 64, 3, 3])
module.features.11.expand3x3.bias torch.Size([256])
module.features.12.squeeze.weight torch.Size([64, 512, 1, 1])
module.features.12.squeeze.bias torch.Size([64])
module.features.12.expand1x1.weight torch.Size([256, 64, 1, 1])
module.features.12.expand1x1.bias torch.Size([256])
module.features.12.expand3x3.weight torch.Size([256, 64, 3, 3])
module.features.12.expand3x3.bias torch.Size([256])
module.classifier.1.weight torch.Size([1000, 512, 1, 1])
module.classifier.1.bias torch.Size([1000])
VE: model DataParallel(
  (module): SqueezeNet(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU(inplace=True)
      (2): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
      (3): Fire(
        (squeeze): Conv2d(64, 16, kernel_size=(1, 1), stride=(1, 1))
        (squeeze_activation): ReLU(inplace=True)
        (expand1x1): Conv2d(16, 64, kernel_size=(1, 1), stride=(1, 1))
        (expand1x1_activation): ReLU(inplace=True)
        (expand3x3): Conv2d(16, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (expand3x3_activation): ReLU(inplace=True)
      )
      (4): Fire(
        (squeeze): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
        (squeeze_activation): ReLU(inplace=True)
        (expand1x1): Conv2d(16, 64, kernel_size=(1, 1), stride=(1, 1))
        (expand1x1_activation): ReLU(inplace=True)
        (expand3x3): Conv2d(16, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (expand3x3_activation): ReLU(inplace=True)
      )
      (5): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
      (6): Fire(
        (squeeze): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
        (squeeze_activation): ReLU(inplace=True)
        (expand1x1): Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1))
        (expand1x1_activation): ReLU(inplace=True)
        (expand3x3): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (expand3x3_activation): ReLU(inplace=True)
      )
      (7): Fire(
        (squeeze): Conv2d(256, 32, kernel_size=(1, 1), stride=(1, 1))
        (squeeze_activation): ReLU(inplace=True)
        (expand1x1): Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1))
        (expand1x1_activation): ReLU(inplace=True)
        (expand3x3): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (expand3x3_activation): ReLU(inplace=True)
      )
      (8): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
      (9): Fire(
        (squeeze): Conv2d(256, 48, kernel_size=(1, 1), stride=(1, 1))
        (squeeze_activation): ReLU(inplace=True)
        (expand1x1): Conv2d(48, 192, kernel_size=(1, 1), stride=(1, 1))
        (expand1x1_activation): ReLU(inplace=True)
        (expand3x3): Conv2d(48, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (expand3x3_activation): ReLU(inplace=True)
      )
      (10): Fire(
        (squeeze): Conv2d(384, 48, kernel_size=(1, 1), stride=(1, 1))
        (squeeze_activation): ReLU(inplace=True)
        (expand1x1): Conv2d(48, 192, kernel_size=(1, 1), stride=(1, 1))
        (expand1x1_activation): ReLU(inplace=True)
        (expand3x3): Conv2d(48, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (expand3x3_activation): ReLU(inplace=True)
      )
      (11): Fire(
        (squeeze): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
        (squeeze_activation): ReLU(inplace=True)
        (expand1x1): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))
        (expand1x1_activation): ReLU(inplace=True)
        (expand3x3): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (expand3x3_activation): ReLU(inplace=True)
      )
      (12): Fire(
        (squeeze): Conv2d(512, 64, kernel_size=(1, 1), stride=(1, 1))
        (squeeze_activation): ReLU(inplace=True)
        (expand1x1): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))
        (expand1x1_activation): ReLU(inplace=True)
        (expand3x3): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (expand3x3_activation): ReLU(inplace=True)
      )
    )
    (classifier): Sequential(
      (0): Dropout(p=0.5, inplace=False)
      (1): Conv2d(512, 1000, kernel_size=(1, 1), stride=(1, 1))
      (2): ReLU(inplace=True)
      (3): AdaptiveAvgPool2d(output_size=(1, 1))
    )
  )
)
module.features.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 3, 224, 224]) : torch.Size([256, 64, 111, 111])
module.features.1: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 64, 111, 111]) : torch.Size([256, 64, 111, 111])
module.features.2: <class 'torch.nn.modules.pooling.MaxPool2d'> : torch.Size([256, 64, 111, 111]) : torch.Size([256, 64, 55, 55])
module.features.3.squeeze: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 64, 55, 55]) : torch.Size([256, 16, 55, 55])
module.features.3.squeeze_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 16, 55, 55]) : torch.Size([256, 16, 55, 55])
module.features.3.expand1x1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 16, 55, 55]) : torch.Size([256, 64, 55, 55])
module.features.3.expand1x1_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 64, 55, 55]) : torch.Size([256, 64, 55, 55])
module.features.3.expand3x3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 16, 55, 55]) : torch.Size([256, 64, 55, 55])
module.features.3.expand3x3_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 64, 55, 55]) : torch.Size([256, 64, 55, 55])
module.features.3: <class 'torchvision.models.squeezenet.Fire'> : torch.Size([256, 64, 55, 55]) : torch.Size([256, 128, 55, 55])
module.features.4.squeeze: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 128, 55, 55]) : torch.Size([256, 16, 55, 55])
module.features.4.squeeze_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 16, 55, 55]) : torch.Size([256, 16, 55, 55])
module.features.4.expand1x1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 16, 55, 55]) : torch.Size([256, 64, 55, 55])
module.features.4.expand1x1_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 64, 55, 55]) : torch.Size([256, 64, 55, 55])
module.features.4.expand3x3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 16, 55, 55]) : torch.Size([256, 64, 55, 55])
module.features.4.expand3x3_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 64, 55, 55]) : torch.Size([256, 64, 55, 55])
module.features.4: <class 'torchvision.models.squeezenet.Fire'> : torch.Size([256, 128, 55, 55]) : torch.Size([256, 128, 55, 55])
module.features.5: <class 'torch.nn.modules.pooling.MaxPool2d'> : torch.Size([256, 128, 55, 55]) : torch.Size([256, 128, 27, 27])
module.features.6.squeeze: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 128, 27, 27]) : torch.Size([256, 32, 27, 27])
module.features.6.squeeze_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 32, 27, 27]) : torch.Size([256, 32, 27, 27])
module.features.6.expand1x1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 32, 27, 27]) : torch.Size([256, 128, 27, 27])
module.features.6.expand1x1_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 128, 27, 27]) : torch.Size([256, 128, 27, 27])
module.features.6.expand3x3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 32, 27, 27]) : torch.Size([256, 128, 27, 27])
module.features.6.expand3x3_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 128, 27, 27]) : torch.Size([256, 128, 27, 27])
module.features.6: <class 'torchvision.models.squeezenet.Fire'> : torch.Size([256, 128, 27, 27]) : torch.Size([256, 256, 27, 27])
module.features.7.squeeze: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 256, 27, 27]) : torch.Size([256, 32, 27, 27])
module.features.7.squeeze_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 32, 27, 27]) : torch.Size([256, 32, 27, 27])
module.features.7.expand1x1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 32, 27, 27]) : torch.Size([256, 128, 27, 27])
module.features.7.expand1x1_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 128, 27, 27]) : torch.Size([256, 128, 27, 27])
module.features.7.expand3x3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 32, 27, 27]) : torch.Size([256, 128, 27, 27])
module.features.7.expand3x3_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 128, 27, 27]) : torch.Size([256, 128, 27, 27])
module.features.7: <class 'torchvision.models.squeezenet.Fire'> : torch.Size([256, 256, 27, 27]) : torch.Size([256, 256, 27, 27])
module.features.8: <class 'torch.nn.modules.pooling.MaxPool2d'> : torch.Size([256, 256, 27, 27]) : torch.Size([256, 256, 13, 13])
module.features.9.squeeze: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 256, 13, 13]) : torch.Size([256, 48, 13, 13])
module.features.9.squeeze_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 48, 13, 13]) : torch.Size([256, 48, 13, 13])
module.features.9.expand1x1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 48, 13, 13]) : torch.Size([256, 192, 13, 13])
module.features.9.expand1x1_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 192, 13, 13]) : torch.Size([256, 192, 13, 13])
module.features.9.expand3x3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 48, 13, 13]) : torch.Size([256, 192, 13, 13])
module.features.9.expand3x3_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 192, 13, 13]) : torch.Size([256, 192, 13, 13])
module.features.9: <class 'torchvision.models.squeezenet.Fire'> : torch.Size([256, 256, 13, 13]) : torch.Size([256, 384, 13, 13])
module.features.10.squeeze: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 384, 13, 13]) : torch.Size([256, 48, 13, 13])
module.features.10.squeeze_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 48, 13, 13]) : torch.Size([256, 48, 13, 13])
module.features.10.expand1x1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 48, 13, 13]) : torch.Size([256, 192, 13, 13])
module.features.10.expand1x1_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 192, 13, 13]) : torch.Size([256, 192, 13, 13])
module.features.10.expand3x3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 48, 13, 13]) : torch.Size([256, 192, 13, 13])
module.features.10.expand3x3_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 192, 13, 13]) : torch.Size([256, 192, 13, 13])
module.features.10: <class 'torchvision.models.squeezenet.Fire'> : torch.Size([256, 384, 13, 13]) : torch.Size([256, 384, 13, 13])
module.features.11.squeeze: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 384, 13, 13]) : torch.Size([256, 64, 13, 13])
module.features.11.squeeze_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 64, 13, 13]) : torch.Size([256, 64, 13, 13])
module.features.11.expand1x1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 64, 13, 13]) : torch.Size([256, 256, 13, 13])
module.features.11.expand1x1_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 256, 13, 13]) : torch.Size([256, 256, 13, 13])
module.features.11.expand3x3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 64, 13, 13]) : torch.Size([256, 256, 13, 13])
module.features.11.expand3x3_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 256, 13, 13]) : torch.Size([256, 256, 13, 13])
module.features.11: <class 'torchvision.models.squeezenet.Fire'> : torch.Size([256, 384, 13, 13]) : torch.Size([256, 512, 13, 13])
module.features.12.squeeze: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 512, 13, 13]) : torch.Size([256, 64, 13, 13])
module.features.12.squeeze_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 64, 13, 13]) : torch.Size([256, 64, 13, 13])
module.features.12.expand1x1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 64, 13, 13]) : torch.Size([256, 256, 13, 13])
module.features.12.expand1x1_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 256, 13, 13]) : torch.Size([256, 256, 13, 13])
module.features.12.expand3x3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 64, 13, 13]) : torch.Size([256, 256, 13, 13])
module.features.12.expand3x3_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 256, 13, 13]) : torch.Size([256, 256, 13, 13])
module.features.12: <class 'torchvision.models.squeezenet.Fire'> : torch.Size([256, 512, 13, 13]) : torch.Size([256, 512, 13, 13])
module.features: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 3, 224, 224]) : torch.Size([256, 512, 13, 13])
module.classifier.0: <class 'torch.nn.modules.dropout.Dropout'> : torch.Size([256, 512, 13, 13]) : torch.Size([256, 512, 13, 13])
module.classifier.1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 512, 13, 13]) : torch.Size([256, 1000, 13, 13])
module.classifier.2: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 1000, 13, 13]) : torch.Size([256, 1000, 13, 13])
module.classifier.3: <class 'torch.nn.modules.pooling.AdaptiveAvgPool2d'> : torch.Size([256, 1000, 13, 13]) : torch.Size([256, 1000, 1, 1])
module.classifier: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 512, 13, 13]) : torch.Size([256, 1000, 1, 1])
module: <class 'torchvision.models.squeezenet.SqueezeNet'> : torch.Size([256, 3, 224, 224]) : torch.Size([256, 1000])
: <class 'torch.nn.parallel.data_parallel.DataParallel'> : torch.Size([256, 3, 224, 224]) : torch.Size([256, 1000])
Epoch: [0][   1/5005]	Time 16.411 (16.411)	Data  1.592 ( 1.592)	Loss 6.9077e+00 (6.9077e+00)	Acc@1   0.00 (  0.00)	Acc@5   0.39 (  0.39)
module.features.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 3, 224, 224]) : torch.Size([256, 64, 111, 111])
module.features.1: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 64, 111, 111]) : torch.Size([256, 64, 111, 111])
module.features.2: <class 'torch.nn.modules.pooling.MaxPool2d'> : torch.Size([256, 64, 111, 111]) : torch.Size([256, 64, 55, 55])
module.features.3.squeeze: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 64, 55, 55]) : torch.Size([256, 16, 55, 55])
module.features.3.squeeze_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 16, 55, 55]) : torch.Size([256, 16, 55, 55])
module.features.3.expand1x1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 16, 55, 55]) : torch.Size([256, 64, 55, 55])
module.features.3.expand1x1_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 64, 55, 55]) : torch.Size([256, 64, 55, 55])
module.features.3.expand3x3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 16, 55, 55]) : torch.Size([256, 64, 55, 55])
module.features.3.expand3x3_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 64, 55, 55]) : torch.Size([256, 64, 55, 55])
module.features.3: <class 'torchvision.models.squeezenet.Fire'> : torch.Size([256, 64, 55, 55]) : torch.Size([256, 128, 55, 55])
module.features.4.squeeze: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 128, 55, 55]) : torch.Size([256, 16, 55, 55])
module.features.4.squeeze_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 16, 55, 55]) : torch.Size([256, 16, 55, 55])
module.features.4.expand1x1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 16, 55, 55]) : torch.Size([256, 64, 55, 55])
module.features.4.expand1x1_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 64, 55, 55]) : torch.Size([256, 64, 55, 55])
module.features.4.expand3x3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 16, 55, 55]) : torch.Size([256, 64, 55, 55])
module.features.4.expand3x3_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 64, 55, 55]) : torch.Size([256, 64, 55, 55])
module.features.4: <class 'torchvision.models.squeezenet.Fire'> : torch.Size([256, 128, 55, 55]) : torch.Size([256, 128, 55, 55])
module.features.5: <class 'torch.nn.modules.pooling.MaxPool2d'> : torch.Size([256, 128, 55, 55]) : torch.Size([256, 128, 27, 27])
module.features.6.squeeze: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 128, 27, 27]) : torch.Size([256, 32, 27, 27])
module.features.6.squeeze_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 32, 27, 27]) : torch.Size([256, 32, 27, 27])
module.features.6.expand1x1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 32, 27, 27]) : torch.Size([256, 128, 27, 27])
module.features.6.expand1x1_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 128, 27, 27]) : torch.Size([256, 128, 27, 27])
module.features.6.expand3x3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 32, 27, 27]) : torch.Size([256, 128, 27, 27])
module.features.6.expand3x3_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 128, 27, 27]) : torch.Size([256, 128, 27, 27])
module.features.6: <class 'torchvision.models.squeezenet.Fire'> : torch.Size([256, 128, 27, 27]) : torch.Size([256, 256, 27, 27])
module.features.7.squeeze: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 256, 27, 27]) : torch.Size([256, 32, 27, 27])
module.features.7.squeeze_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 32, 27, 27]) : torch.Size([256, 32, 27, 27])
module.features.7.expand1x1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 32, 27, 27]) : torch.Size([256, 128, 27, 27])
module.features.7.expand1x1_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 128, 27, 27]) : torch.Size([256, 128, 27, 27])
module.features.7.expand3x3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 32, 27, 27]) : torch.Size([256, 128, 27, 27])
module.features.7.expand3x3_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 128, 27, 27]) : torch.Size([256, 128, 27, 27])
module.features.7: <class 'torchvision.models.squeezenet.Fire'> : torch.Size([256, 256, 27, 27]) : torch.Size([256, 256, 27, 27])
module.features.8: <class 'torch.nn.modules.pooling.MaxPool2d'> : torch.Size([256, 256, 27, 27]) : torch.Size([256, 256, 13, 13])
module.features.9.squeeze: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 256, 13, 13]) : torch.Size([256, 48, 13, 13])
module.features.9.squeeze_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 48, 13, 13]) : torch.Size([256, 48, 13, 13])
module.features.9.expand1x1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 48, 13, 13]) : torch.Size([256, 192, 13, 13])
module.features.9.expand1x1_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 192, 13, 13]) : torch.Size([256, 192, 13, 13])
module.features.9.expand3x3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 48, 13, 13]) : torch.Size([256, 192, 13, 13])
module.features.9.expand3x3_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 192, 13, 13]) : torch.Size([256, 192, 13, 13])
module.features.9: <class 'torchvision.models.squeezenet.Fire'> : torch.Size([256, 256, 13, 13]) : torch.Size([256, 384, 13, 13])
module.features.10.squeeze: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 384, 13, 13]) : torch.Size([256, 48, 13, 13])
module.features.10.squeeze_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 48, 13, 13]) : torch.Size([256, 48, 13, 13])
module.features.10.expand1x1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 48, 13, 13]) : torch.Size([256, 192, 13, 13])
module.features.10.expand1x1_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 192, 13, 13]) : torch.Size([256, 192, 13, 13])
module.features.10.expand3x3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 48, 13, 13]) : torch.Size([256, 192, 13, 13])
module.features.10.expand3x3_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 192, 13, 13]) : torch.Size([256, 192, 13, 13])
module.features.10: <class 'torchvision.models.squeezenet.Fire'> : torch.Size([256, 384, 13, 13]) : torch.Size([256, 384, 13, 13])
module.features.11.squeeze: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 384, 13, 13]) : torch.Size([256, 64, 13, 13])
module.features.11.squeeze_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 64, 13, 13]) : torch.Size([256, 64, 13, 13])
module.features.11.expand1x1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 64, 13, 13]) : torch.Size([256, 256, 13, 13])
module.features.11.expand1x1_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 256, 13, 13]) : torch.Size([256, 256, 13, 13])
module.features.11.expand3x3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 64, 13, 13]) : torch.Size([256, 256, 13, 13])
module.features.11.expand3x3_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 256, 13, 13]) : torch.Size([256, 256, 13, 13])
module.features.11: <class 'torchvision.models.squeezenet.Fire'> : torch.Size([256, 384, 13, 13]) : torch.Size([256, 512, 13, 13])
module.features.12.squeeze: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 512, 13, 13]) : torch.Size([256, 64, 13, 13])
module.features.12.squeeze_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 64, 13, 13]) : torch.Size([256, 64, 13, 13])
module.features.12.expand1x1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 64, 13, 13]) : torch.Size([256, 256, 13, 13])
module.features.12.expand1x1_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 256, 13, 13]) : torch.Size([256, 256, 13, 13])
module.features.12.expand3x3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 64, 13, 13]) : torch.Size([256, 256, 13, 13])
module.features.12.expand3x3_activation: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 256, 13, 13]) : torch.Size([256, 256, 13, 13])
module.features.12: <class 'torchvision.models.squeezenet.Fire'> : torch.Size([256, 512, 13, 13]) : torch.Size([256, 512, 13, 13])
module.features: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 3, 224, 224]) : torch.Size([256, 512, 13, 13])
module.classifier.0: <class 'torch.nn.modules.dropout.Dropout'> : torch.Size([256, 512, 13, 13]) : torch.Size([256, 512, 13, 13])
module.classifier.1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 512, 13, 13]) : torch.Size([256, 1000, 13, 13])
module.classifier.2: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 1000, 13, 13]) : torch.Size([256, 1000, 13, 13])
module.classifier.3: <class 'torch.nn.modules.pooling.AdaptiveAvgPool2d'> : torch.Size([256, 1000, 13, 13]) : torch.Size([256, 1000, 1, 1])
module.classifier: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 512, 13, 13]) : torch.Size([256, 1000, 1, 1])
module: <class 'torchvision.models.squeezenet.SqueezeNet'> : torch.Size([256, 3, 224, 224]) : torch.Size([256, 1000])
: <class 'torch.nn.parallel.data_parallel.DataParallel'> : torch.Size([256, 3, 224, 224]) : torch.Size([256, 1000])
Test: [  1/196]	Time  1.235 ( 1.235)	Loss 6.9186e+00 (6.9186e+00)	Acc@1   0.00 (  0.00)	Acc@5   0.39 (  0.39)
 *   Acc@1 0.000 Acc@5 0.391
