=> creating model 'shufflenet_v2_x1_0'
=> Dummy data is used!
module.conv1.0.weight torch.Size([24, 3, 3, 3])
module.conv1.1.weight torch.Size([24])
module.conv1.1.bias torch.Size([24])
module.stage2.0.branch1.0.weight torch.Size([24, 1, 3, 3])
module.stage2.0.branch1.1.weight torch.Size([24])
module.stage2.0.branch1.1.bias torch.Size([24])
module.stage2.0.branch1.2.weight torch.Size([58, 24, 1, 1])
module.stage2.0.branch1.3.weight torch.Size([58])
module.stage2.0.branch1.3.bias torch.Size([58])
module.stage2.0.branch2.0.weight torch.Size([58, 24, 1, 1])
module.stage2.0.branch2.1.weight torch.Size([58])
module.stage2.0.branch2.1.bias torch.Size([58])
module.stage2.0.branch2.3.weight torch.Size([58, 1, 3, 3])
module.stage2.0.branch2.4.weight torch.Size([58])
module.stage2.0.branch2.4.bias torch.Size([58])
module.stage2.0.branch2.5.weight torch.Size([58, 58, 1, 1])
module.stage2.0.branch2.6.weight torch.Size([58])
module.stage2.0.branch2.6.bias torch.Size([58])
module.stage2.1.branch2.0.weight torch.Size([58, 58, 1, 1])
module.stage2.1.branch2.1.weight torch.Size([58])
module.stage2.1.branch2.1.bias torch.Size([58])
module.stage2.1.branch2.3.weight torch.Size([58, 1, 3, 3])
module.stage2.1.branch2.4.weight torch.Size([58])
module.stage2.1.branch2.4.bias torch.Size([58])
module.stage2.1.branch2.5.weight torch.Size([58, 58, 1, 1])
module.stage2.1.branch2.6.weight torch.Size([58])
module.stage2.1.branch2.6.bias torch.Size([58])
module.stage2.2.branch2.0.weight torch.Size([58, 58, 1, 1])
module.stage2.2.branch2.1.weight torch.Size([58])
module.stage2.2.branch2.1.bias torch.Size([58])
module.stage2.2.branch2.3.weight torch.Size([58, 1, 3, 3])
module.stage2.2.branch2.4.weight torch.Size([58])
module.stage2.2.branch2.4.bias torch.Size([58])
module.stage2.2.branch2.5.weight torch.Size([58, 58, 1, 1])
module.stage2.2.branch2.6.weight torch.Size([58])
module.stage2.2.branch2.6.bias torch.Size([58])
module.stage2.3.branch2.0.weight torch.Size([58, 58, 1, 1])
module.stage2.3.branch2.1.weight torch.Size([58])
module.stage2.3.branch2.1.bias torch.Size([58])
module.stage2.3.branch2.3.weight torch.Size([58, 1, 3, 3])
module.stage2.3.branch2.4.weight torch.Size([58])
module.stage2.3.branch2.4.bias torch.Size([58])
module.stage2.3.branch2.5.weight torch.Size([58, 58, 1, 1])
module.stage2.3.branch2.6.weight torch.Size([58])
module.stage2.3.branch2.6.bias torch.Size([58])
module.stage3.0.branch1.0.weight torch.Size([116, 1, 3, 3])
module.stage3.0.branch1.1.weight torch.Size([116])
module.stage3.0.branch1.1.bias torch.Size([116])
module.stage3.0.branch1.2.weight torch.Size([116, 116, 1, 1])
module.stage3.0.branch1.3.weight torch.Size([116])
module.stage3.0.branch1.3.bias torch.Size([116])
module.stage3.0.branch2.0.weight torch.Size([116, 116, 1, 1])
module.stage3.0.branch2.1.weight torch.Size([116])
module.stage3.0.branch2.1.bias torch.Size([116])
module.stage3.0.branch2.3.weight torch.Size([116, 1, 3, 3])
module.stage3.0.branch2.4.weight torch.Size([116])
module.stage3.0.branch2.4.bias torch.Size([116])
module.stage3.0.branch2.5.weight torch.Size([116, 116, 1, 1])
module.stage3.0.branch2.6.weight torch.Size([116])
module.stage3.0.branch2.6.bias torch.Size([116])
module.stage3.1.branch2.0.weight torch.Size([116, 116, 1, 1])
module.stage3.1.branch2.1.weight torch.Size([116])
module.stage3.1.branch2.1.bias torch.Size([116])
module.stage3.1.branch2.3.weight torch.Size([116, 1, 3, 3])
module.stage3.1.branch2.4.weight torch.Size([116])
module.stage3.1.branch2.4.bias torch.Size([116])
module.stage3.1.branch2.5.weight torch.Size([116, 116, 1, 1])
module.stage3.1.branch2.6.weight torch.Size([116])
module.stage3.1.branch2.6.bias torch.Size([116])
module.stage3.2.branch2.0.weight torch.Size([116, 116, 1, 1])
module.stage3.2.branch2.1.weight torch.Size([116])
module.stage3.2.branch2.1.bias torch.Size([116])
module.stage3.2.branch2.3.weight torch.Size([116, 1, 3, 3])
module.stage3.2.branch2.4.weight torch.Size([116])
module.stage3.2.branch2.4.bias torch.Size([116])
module.stage3.2.branch2.5.weight torch.Size([116, 116, 1, 1])
module.stage3.2.branch2.6.weight torch.Size([116])
module.stage3.2.branch2.6.bias torch.Size([116])
module.stage3.3.branch2.0.weight torch.Size([116, 116, 1, 1])
module.stage3.3.branch2.1.weight torch.Size([116])
module.stage3.3.branch2.1.bias torch.Size([116])
module.stage3.3.branch2.3.weight torch.Size([116, 1, 3, 3])
module.stage3.3.branch2.4.weight torch.Size([116])
module.stage3.3.branch2.4.bias torch.Size([116])
module.stage3.3.branch2.5.weight torch.Size([116, 116, 1, 1])
module.stage3.3.branch2.6.weight torch.Size([116])
module.stage3.3.branch2.6.bias torch.Size([116])
module.stage3.4.branch2.0.weight torch.Size([116, 116, 1, 1])
module.stage3.4.branch2.1.weight torch.Size([116])
module.stage3.4.branch2.1.bias torch.Size([116])
module.stage3.4.branch2.3.weight torch.Size([116, 1, 3, 3])
module.stage3.4.branch2.4.weight torch.Size([116])
module.stage3.4.branch2.4.bias torch.Size([116])
module.stage3.4.branch2.5.weight torch.Size([116, 116, 1, 1])
module.stage3.4.branch2.6.weight torch.Size([116])
module.stage3.4.branch2.6.bias torch.Size([116])
module.stage3.5.branch2.0.weight torch.Size([116, 116, 1, 1])
module.stage3.5.branch2.1.weight torch.Size([116])
module.stage3.5.branch2.1.bias torch.Size([116])
module.stage3.5.branch2.3.weight torch.Size([116, 1, 3, 3])
module.stage3.5.branch2.4.weight torch.Size([116])
module.stage3.5.branch2.4.bias torch.Size([116])
module.stage3.5.branch2.5.weight torch.Size([116, 116, 1, 1])
module.stage3.5.branch2.6.weight torch.Size([116])
module.stage3.5.branch2.6.bias torch.Size([116])
module.stage3.6.branch2.0.weight torch.Size([116, 116, 1, 1])
module.stage3.6.branch2.1.weight torch.Size([116])
module.stage3.6.branch2.1.bias torch.Size([116])
module.stage3.6.branch2.3.weight torch.Size([116, 1, 3, 3])
module.stage3.6.branch2.4.weight torch.Size([116])
module.stage3.6.branch2.4.bias torch.Size([116])
module.stage3.6.branch2.5.weight torch.Size([116, 116, 1, 1])
module.stage3.6.branch2.6.weight torch.Size([116])
module.stage3.6.branch2.6.bias torch.Size([116])
module.stage3.7.branch2.0.weight torch.Size([116, 116, 1, 1])
module.stage3.7.branch2.1.weight torch.Size([116])
module.stage3.7.branch2.1.bias torch.Size([116])
module.stage3.7.branch2.3.weight torch.Size([116, 1, 3, 3])
module.stage3.7.branch2.4.weight torch.Size([116])
module.stage3.7.branch2.4.bias torch.Size([116])
module.stage3.7.branch2.5.weight torch.Size([116, 116, 1, 1])
module.stage3.7.branch2.6.weight torch.Size([116])
module.stage3.7.branch2.6.bias torch.Size([116])
module.stage4.0.branch1.0.weight torch.Size([232, 1, 3, 3])
module.stage4.0.branch1.1.weight torch.Size([232])
module.stage4.0.branch1.1.bias torch.Size([232])
module.stage4.0.branch1.2.weight torch.Size([232, 232, 1, 1])
module.stage4.0.branch1.3.weight torch.Size([232])
module.stage4.0.branch1.3.bias torch.Size([232])
module.stage4.0.branch2.0.weight torch.Size([232, 232, 1, 1])
module.stage4.0.branch2.1.weight torch.Size([232])
module.stage4.0.branch2.1.bias torch.Size([232])
module.stage4.0.branch2.3.weight torch.Size([232, 1, 3, 3])
module.stage4.0.branch2.4.weight torch.Size([232])
module.stage4.0.branch2.4.bias torch.Size([232])
module.stage4.0.branch2.5.weight torch.Size([232, 232, 1, 1])
module.stage4.0.branch2.6.weight torch.Size([232])
module.stage4.0.branch2.6.bias torch.Size([232])
module.stage4.1.branch2.0.weight torch.Size([232, 232, 1, 1])
module.stage4.1.branch2.1.weight torch.Size([232])
module.stage4.1.branch2.1.bias torch.Size([232])
module.stage4.1.branch2.3.weight torch.Size([232, 1, 3, 3])
module.stage4.1.branch2.4.weight torch.Size([232])
module.stage4.1.branch2.4.bias torch.Size([232])
module.stage4.1.branch2.5.weight torch.Size([232, 232, 1, 1])
module.stage4.1.branch2.6.weight torch.Size([232])
module.stage4.1.branch2.6.bias torch.Size([232])
module.stage4.2.branch2.0.weight torch.Size([232, 232, 1, 1])
module.stage4.2.branch2.1.weight torch.Size([232])
module.stage4.2.branch2.1.bias torch.Size([232])
module.stage4.2.branch2.3.weight torch.Size([232, 1, 3, 3])
module.stage4.2.branch2.4.weight torch.Size([232])
module.stage4.2.branch2.4.bias torch.Size([232])
module.stage4.2.branch2.5.weight torch.Size([232, 232, 1, 1])
module.stage4.2.branch2.6.weight torch.Size([232])
module.stage4.2.branch2.6.bias torch.Size([232])
module.stage4.3.branch2.0.weight torch.Size([232, 232, 1, 1])
module.stage4.3.branch2.1.weight torch.Size([232])
module.stage4.3.branch2.1.bias torch.Size([232])
module.stage4.3.branch2.3.weight torch.Size([232, 1, 3, 3])
module.stage4.3.branch2.4.weight torch.Size([232])
module.stage4.3.branch2.4.bias torch.Size([232])
module.stage4.3.branch2.5.weight torch.Size([232, 232, 1, 1])
module.stage4.3.branch2.6.weight torch.Size([232])
module.stage4.3.branch2.6.bias torch.Size([232])
module.conv5.0.weight torch.Size([1024, 464, 1, 1])
module.conv5.1.weight torch.Size([1024])
module.conv5.1.bias torch.Size([1024])
module.fc.weight torch.Size([1000, 1024])
module.fc.bias torch.Size([1000])
VE: model DataParallel(
  (module): ShuffleNetV2(
    (conv1): Sequential(
      (0): Conv2d(3, 24, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
    )
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (stage2): Sequential(
      (0): InvertedResidual(
        (branch1): Sequential(
          (0): Conv2d(24, 24, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=24, bias=False)
          (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): Conv2d(24, 58, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (3): BatchNorm2d(58, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (4): ReLU(inplace=True)
        )
        (branch2): Sequential(
          (0): Conv2d(24, 58, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(58, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(58, 58, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=58, bias=False)
          (4): BatchNorm2d(58, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): Conv2d(58, 58, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (6): BatchNorm2d(58, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (7): ReLU(inplace=True)
        )
      )
      (1): InvertedResidual(
        (branch1): Sequential()
        (branch2): Sequential(
          (0): Conv2d(58, 58, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(58, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(58, 58, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=58, bias=False)
          (4): BatchNorm2d(58, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): Conv2d(58, 58, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (6): BatchNorm2d(58, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (7): ReLU(inplace=True)
        )
      )
      (2): InvertedResidual(
        (branch1): Sequential()
        (branch2): Sequential(
          (0): Conv2d(58, 58, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(58, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(58, 58, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=58, bias=False)
          (4): BatchNorm2d(58, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): Conv2d(58, 58, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (6): BatchNorm2d(58, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (7): ReLU(inplace=True)
        )
      )
      (3): InvertedResidual(
        (branch1): Sequential()
        (branch2): Sequential(
          (0): Conv2d(58, 58, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(58, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(58, 58, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=58, bias=False)
          (4): BatchNorm2d(58, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): Conv2d(58, 58, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (6): BatchNorm2d(58, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (7): ReLU(inplace=True)
        )
      )
    )
    (stage3): Sequential(
      (0): InvertedResidual(
        (branch1): Sequential(
          (0): Conv2d(116, 116, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=116, bias=False)
          (1): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): Conv2d(116, 116, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (3): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (4): ReLU(inplace=True)
        )
        (branch2): Sequential(
          (0): Conv2d(116, 116, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(116, 116, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=116, bias=False)
          (4): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): Conv2d(116, 116, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (6): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (7): ReLU(inplace=True)
        )
      )
      (1): InvertedResidual(
        (branch1): Sequential()
        (branch2): Sequential(
          (0): Conv2d(116, 116, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(116, 116, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=116, bias=False)
          (4): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): Conv2d(116, 116, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (6): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (7): ReLU(inplace=True)
        )
      )
      (2): InvertedResidual(
        (branch1): Sequential()
        (branch2): Sequential(
          (0): Conv2d(116, 116, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(116, 116, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=116, bias=False)
          (4): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): Conv2d(116, 116, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (6): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (7): ReLU(inplace=True)
        )
      )
      (3): InvertedResidual(
        (branch1): Sequential()
        (branch2): Sequential(
          (0): Conv2d(116, 116, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(116, 116, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=116, bias=False)
          (4): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): Conv2d(116, 116, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (6): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (7): ReLU(inplace=True)
        )
      )
      (4): InvertedResidual(
        (branch1): Sequential()
        (branch2): Sequential(
          (0): Conv2d(116, 116, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(116, 116, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=116, bias=False)
          (4): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): Conv2d(116, 116, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (6): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (7): ReLU(inplace=True)
        )
      )
      (5): InvertedResidual(
        (branch1): Sequential()
        (branch2): Sequential(
          (0): Conv2d(116, 116, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(116, 116, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=116, bias=False)
          (4): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): Conv2d(116, 116, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (6): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (7): ReLU(inplace=True)
        )
      )
      (6): InvertedResidual(
        (branch1): Sequential()
        (branch2): Sequential(
          (0): Conv2d(116, 116, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(116, 116, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=116, bias=False)
          (4): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): Conv2d(116, 116, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (6): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (7): ReLU(inplace=True)
        )
      )
      (7): InvertedResidual(
        (branch1): Sequential()
        (branch2): Sequential(
          (0): Conv2d(116, 116, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(116, 116, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=116, bias=False)
          (4): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): Conv2d(116, 116, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (6): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (7): ReLU(inplace=True)
        )
      )
    )
    (stage4): Sequential(
      (0): InvertedResidual(
        (branch1): Sequential(
          (0): Conv2d(232, 232, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=232, bias=False)
          (1): BatchNorm2d(232, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): Conv2d(232, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (3): BatchNorm2d(232, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (4): ReLU(inplace=True)
        )
        (branch2): Sequential(
          (0): Conv2d(232, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(232, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(232, 232, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=232, bias=False)
          (4): BatchNorm2d(232, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): Conv2d(232, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (6): BatchNorm2d(232, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (7): ReLU(inplace=True)
        )
      )
      (1): InvertedResidual(
        (branch1): Sequential()
        (branch2): Sequential(
          (0): Conv2d(232, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(232, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(232, 232, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=232, bias=False)
          (4): BatchNorm2d(232, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): Conv2d(232, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (6): BatchNorm2d(232, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (7): ReLU(inplace=True)
        )
      )
      (2): InvertedResidual(
        (branch1): Sequential()
        (branch2): Sequential(
          (0): Conv2d(232, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(232, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(232, 232, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=232, bias=False)
          (4): BatchNorm2d(232, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): Conv2d(232, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (6): BatchNorm2d(232, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (7): ReLU(inplace=True)
        )
      )
      (3): InvertedResidual(
        (branch1): Sequential()
        (branch2): Sequential(
          (0): Conv2d(232, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(232, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(232, 232, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=232, bias=False)
          (4): BatchNorm2d(232, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): Conv2d(232, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (6): BatchNorm2d(232, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (7): ReLU(inplace=True)
        )
      )
    )
    (conv5): Sequential(
      (0): Conv2d(464, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
    )
    (fc): Linear(in_features=1024, out_features=1000, bias=True)
  )
)
module.conv1.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 3, 224, 224]) : torch.Size([256, 24, 112, 112])
module.conv1.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 24, 112, 112]) : torch.Size([256, 24, 112, 112])
module.conv1.2: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 24, 112, 112]) : torch.Size([256, 24, 112, 112])
module.conv1: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 3, 224, 224]) : torch.Size([256, 24, 112, 112])
module.maxpool: <class 'torch.nn.modules.pooling.MaxPool2d'> : torch.Size([256, 24, 112, 112]) : torch.Size([256, 24, 56, 56])
module.stage2.0.branch1.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 24, 56, 56]) : torch.Size([256, 24, 28, 28])
module.stage2.0.branch1.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 24, 28, 28]) : torch.Size([256, 24, 28, 28])
module.stage2.0.branch1.2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 24, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.0.branch1.3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.0.branch1.4: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.0.branch1: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 24, 56, 56]) : torch.Size([256, 58, 28, 28])
module.stage2.0.branch2.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 24, 56, 56]) : torch.Size([256, 58, 56, 56])
module.stage2.0.branch2.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 58, 56, 56]) : torch.Size([256, 58, 56, 56])
module.stage2.0.branch2.2: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 58, 56, 56]) : torch.Size([256, 58, 56, 56])
module.stage2.0.branch2.3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 58, 56, 56]) : torch.Size([256, 58, 28, 28])
module.stage2.0.branch2.4: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.0.branch2.5: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.0.branch2.6: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.0.branch2.7: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.0.branch2: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 24, 56, 56]) : torch.Size([256, 58, 28, 28])
module.stage2.0: <class 'torchvision.models.shufflenetv2.InvertedResidual'> : torch.Size([256, 24, 56, 56]) : torch.Size([256, 116, 28, 28])
module.stage2.1.branch2.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.1.branch2.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.1.branch2.2: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.1.branch2.3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.1.branch2.4: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.1.branch2.5: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.1.branch2.6: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.1.branch2.7: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.1.branch2: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.1: <class 'torchvision.models.shufflenetv2.InvertedResidual'> : torch.Size([256, 116, 28, 28]) : torch.Size([256, 116, 28, 28])
module.stage2.2.branch2.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.2.branch2.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.2.branch2.2: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.2.branch2.3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.2.branch2.4: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.2.branch2.5: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.2.branch2.6: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.2.branch2.7: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.2.branch2: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.2: <class 'torchvision.models.shufflenetv2.InvertedResidual'> : torch.Size([256, 116, 28, 28]) : torch.Size([256, 116, 28, 28])
module.stage2.3.branch2.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.3.branch2.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.3.branch2.2: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.3.branch2.3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.3.branch2.4: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.3.branch2.5: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.3.branch2.6: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.3.branch2.7: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.3.branch2: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.3: <class 'torchvision.models.shufflenetv2.InvertedResidual'> : torch.Size([256, 116, 28, 28]) : torch.Size([256, 116, 28, 28])
module.stage2: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 24, 56, 56]) : torch.Size([256, 116, 28, 28])
module.stage3.0.branch1.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 28, 28]) : torch.Size([256, 116, 14, 14])
module.stage3.0.branch1.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.0.branch1.2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.0.branch1.3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.0.branch1.4: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.0.branch1: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 116, 28, 28]) : torch.Size([256, 116, 14, 14])
module.stage3.0.branch2.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 28, 28]) : torch.Size([256, 116, 28, 28])
module.stage3.0.branch2.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 28, 28]) : torch.Size([256, 116, 28, 28])
module.stage3.0.branch2.2: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 116, 28, 28]) : torch.Size([256, 116, 28, 28])
module.stage3.0.branch2.3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 28, 28]) : torch.Size([256, 116, 14, 14])
module.stage3.0.branch2.4: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.0.branch2.5: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.0.branch2.6: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.0.branch2.7: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.0.branch2: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 116, 28, 28]) : torch.Size([256, 116, 14, 14])
module.stage3.0: <class 'torchvision.models.shufflenetv2.InvertedResidual'> : torch.Size([256, 116, 28, 28]) : torch.Size([256, 232, 14, 14])
module.stage3.1.branch2.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.1.branch2.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.1.branch2.2: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.1.branch2.3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.1.branch2.4: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.1.branch2.5: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.1.branch2.6: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.1.branch2.7: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.1.branch2: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.1: <class 'torchvision.models.shufflenetv2.InvertedResidual'> : torch.Size([256, 232, 14, 14]) : torch.Size([256, 232, 14, 14])
module.stage3.2.branch2.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.2.branch2.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.2.branch2.2: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.2.branch2.3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.2.branch2.4: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.2.branch2.5: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.2.branch2.6: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.2.branch2.7: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.2.branch2: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.2: <class 'torchvision.models.shufflenetv2.InvertedResidual'> : torch.Size([256, 232, 14, 14]) : torch.Size([256, 232, 14, 14])
module.stage3.3.branch2.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.3.branch2.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.3.branch2.2: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.3.branch2.3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.3.branch2.4: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.3.branch2.5: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.3.branch2.6: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.3.branch2.7: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.3.branch2: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.3: <class 'torchvision.models.shufflenetv2.InvertedResidual'> : torch.Size([256, 232, 14, 14]) : torch.Size([256, 232, 14, 14])
module.stage3.4.branch2.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.4.branch2.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.4.branch2.2: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.4.branch2.3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.4.branch2.4: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.4.branch2.5: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.4.branch2.6: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.4.branch2.7: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.4.branch2: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.4: <class 'torchvision.models.shufflenetv2.InvertedResidual'> : torch.Size([256, 232, 14, 14]) : torch.Size([256, 232, 14, 14])
module.stage3.5.branch2.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.5.branch2.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.5.branch2.2: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.5.branch2.3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.5.branch2.4: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.5.branch2.5: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.5.branch2.6: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.5.branch2.7: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.5.branch2: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.5: <class 'torchvision.models.shufflenetv2.InvertedResidual'> : torch.Size([256, 232, 14, 14]) : torch.Size([256, 232, 14, 14])
module.stage3.6.branch2.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.6.branch2.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.6.branch2.2: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.6.branch2.3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.6.branch2.4: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.6.branch2.5: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.6.branch2.6: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.6.branch2.7: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.6.branch2: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.6: <class 'torchvision.models.shufflenetv2.InvertedResidual'> : torch.Size([256, 232, 14, 14]) : torch.Size([256, 232, 14, 14])
module.stage3.7.branch2.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.7.branch2.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.7.branch2.2: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.7.branch2.3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.7.branch2.4: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.7.branch2.5: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.7.branch2.6: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.7.branch2.7: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.7.branch2: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.7: <class 'torchvision.models.shufflenetv2.InvertedResidual'> : torch.Size([256, 232, 14, 14]) : torch.Size([256, 232, 14, 14])
module.stage3: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 116, 28, 28]) : torch.Size([256, 232, 14, 14])
module.stage4.0.branch1.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 232, 14, 14]) : torch.Size([256, 232, 7, 7])
module.stage4.0.branch1.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.0.branch1.2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.0.branch1.3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.0.branch1.4: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.0.branch1: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 232, 14, 14]) : torch.Size([256, 232, 7, 7])
module.stage4.0.branch2.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 232, 14, 14]) : torch.Size([256, 232, 14, 14])
module.stage4.0.branch2.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 232, 14, 14]) : torch.Size([256, 232, 14, 14])
module.stage4.0.branch2.2: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 232, 14, 14]) : torch.Size([256, 232, 14, 14])
module.stage4.0.branch2.3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 232, 14, 14]) : torch.Size([256, 232, 7, 7])
module.stage4.0.branch2.4: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.0.branch2.5: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.0.branch2.6: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.0.branch2.7: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.0.branch2: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 232, 14, 14]) : torch.Size([256, 232, 7, 7])
module.stage4.0: <class 'torchvision.models.shufflenetv2.InvertedResidual'> : torch.Size([256, 232, 14, 14]) : torch.Size([256, 464, 7, 7])
module.stage4.1.branch2.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.1.branch2.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.1.branch2.2: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.1.branch2.3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.1.branch2.4: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.1.branch2.5: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.1.branch2.6: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.1.branch2.7: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.1.branch2: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.1: <class 'torchvision.models.shufflenetv2.InvertedResidual'> : torch.Size([256, 464, 7, 7]) : torch.Size([256, 464, 7, 7])
module.stage4.2.branch2.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.2.branch2.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.2.branch2.2: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.2.branch2.3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.2.branch2.4: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.2.branch2.5: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.2.branch2.6: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.2.branch2.7: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.2.branch2: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.2: <class 'torchvision.models.shufflenetv2.InvertedResidual'> : torch.Size([256, 464, 7, 7]) : torch.Size([256, 464, 7, 7])
module.stage4.3.branch2.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.3.branch2.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.3.branch2.2: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.3.branch2.3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.3.branch2.4: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.3.branch2.5: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.3.branch2.6: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.3.branch2.7: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.3.branch2: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.3: <class 'torchvision.models.shufflenetv2.InvertedResidual'> : torch.Size([256, 464, 7, 7]) : torch.Size([256, 464, 7, 7])
module.stage4: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 232, 14, 14]) : torch.Size([256, 464, 7, 7])
module.conv5.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 464, 7, 7]) : torch.Size([256, 1024, 7, 7])
module.conv5.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 1024, 7, 7]) : torch.Size([256, 1024, 7, 7])
module.conv5.2: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 1024, 7, 7]) : torch.Size([256, 1024, 7, 7])
module.conv5: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 464, 7, 7]) : torch.Size([256, 1024, 7, 7])
module.fc: <class 'torch.nn.modules.linear.Linear'> : torch.Size([256, 1024]) : torch.Size([256, 1000])
module: <class 'torchvision.models.shufflenetv2.ShuffleNetV2'> : torch.Size([256, 3, 224, 224]) : torch.Size([256, 1000])
: <class 'torch.nn.parallel.data_parallel.DataParallel'> : torch.Size([256, 3, 224, 224]) : torch.Size([256, 1000])
Epoch: [0][   1/5005]	Time  5.687 ( 5.687)	Data  1.699 ( 1.699)	Loss 6.9384e+00 (6.9384e+00)	Acc@1   0.00 (  0.00)	Acc@5   0.00 (  0.00)
module.conv1.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 3, 224, 224]) : torch.Size([256, 24, 112, 112])
module.conv1.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 24, 112, 112]) : torch.Size([256, 24, 112, 112])
module.conv1.2: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 24, 112, 112]) : torch.Size([256, 24, 112, 112])
module.conv1: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 3, 224, 224]) : torch.Size([256, 24, 112, 112])
module.maxpool: <class 'torch.nn.modules.pooling.MaxPool2d'> : torch.Size([256, 24, 112, 112]) : torch.Size([256, 24, 56, 56])
module.stage2.0.branch1.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 24, 56, 56]) : torch.Size([256, 24, 28, 28])
module.stage2.0.branch1.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 24, 28, 28]) : torch.Size([256, 24, 28, 28])
module.stage2.0.branch1.2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 24, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.0.branch1.3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.0.branch1.4: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.0.branch1: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 24, 56, 56]) : torch.Size([256, 58, 28, 28])
module.stage2.0.branch2.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 24, 56, 56]) : torch.Size([256, 58, 56, 56])
module.stage2.0.branch2.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 58, 56, 56]) : torch.Size([256, 58, 56, 56])
module.stage2.0.branch2.2: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 58, 56, 56]) : torch.Size([256, 58, 56, 56])
module.stage2.0.branch2.3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 58, 56, 56]) : torch.Size([256, 58, 28, 28])
module.stage2.0.branch2.4: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.0.branch2.5: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.0.branch2.6: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.0.branch2.7: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.0.branch2: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 24, 56, 56]) : torch.Size([256, 58, 28, 28])
module.stage2.0: <class 'torchvision.models.shufflenetv2.InvertedResidual'> : torch.Size([256, 24, 56, 56]) : torch.Size([256, 116, 28, 28])
module.stage2.1.branch2.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.1.branch2.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.1.branch2.2: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.1.branch2.3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.1.branch2.4: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.1.branch2.5: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.1.branch2.6: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.1.branch2.7: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.1.branch2: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.1: <class 'torchvision.models.shufflenetv2.InvertedResidual'> : torch.Size([256, 116, 28, 28]) : torch.Size([256, 116, 28, 28])
module.stage2.2.branch2.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.2.branch2.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.2.branch2.2: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.2.branch2.3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.2.branch2.4: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.2.branch2.5: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.2.branch2.6: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.2.branch2.7: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.2.branch2: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.2: <class 'torchvision.models.shufflenetv2.InvertedResidual'> : torch.Size([256, 116, 28, 28]) : torch.Size([256, 116, 28, 28])
module.stage2.3.branch2.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.3.branch2.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.3.branch2.2: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.3.branch2.3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.3.branch2.4: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.3.branch2.5: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.3.branch2.6: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.3.branch2.7: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.3.branch2: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 58, 28, 28]) : torch.Size([256, 58, 28, 28])
module.stage2.3: <class 'torchvision.models.shufflenetv2.InvertedResidual'> : torch.Size([256, 116, 28, 28]) : torch.Size([256, 116, 28, 28])
module.stage2: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 24, 56, 56]) : torch.Size([256, 116, 28, 28])
module.stage3.0.branch1.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 28, 28]) : torch.Size([256, 116, 14, 14])
module.stage3.0.branch1.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.0.branch1.2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.0.branch1.3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.0.branch1.4: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.0.branch1: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 116, 28, 28]) : torch.Size([256, 116, 14, 14])
module.stage3.0.branch2.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 28, 28]) : torch.Size([256, 116, 28, 28])
module.stage3.0.branch2.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 28, 28]) : torch.Size([256, 116, 28, 28])
module.stage3.0.branch2.2: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 116, 28, 28]) : torch.Size([256, 116, 28, 28])
module.stage3.0.branch2.3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 28, 28]) : torch.Size([256, 116, 14, 14])
module.stage3.0.branch2.4: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.0.branch2.5: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.0.branch2.6: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.0.branch2.7: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.0.branch2: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 116, 28, 28]) : torch.Size([256, 116, 14, 14])
module.stage3.0: <class 'torchvision.models.shufflenetv2.InvertedResidual'> : torch.Size([256, 116, 28, 28]) : torch.Size([256, 232, 14, 14])
module.stage3.1.branch2.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.1.branch2.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.1.branch2.2: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.1.branch2.3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.1.branch2.4: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.1.branch2.5: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.1.branch2.6: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.1.branch2.7: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.1.branch2: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.1: <class 'torchvision.models.shufflenetv2.InvertedResidual'> : torch.Size([256, 232, 14, 14]) : torch.Size([256, 232, 14, 14])
module.stage3.2.branch2.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.2.branch2.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.2.branch2.2: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.2.branch2.3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.2.branch2.4: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.2.branch2.5: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.2.branch2.6: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.2.branch2.7: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.2.branch2: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.2: <class 'torchvision.models.shufflenetv2.InvertedResidual'> : torch.Size([256, 232, 14, 14]) : torch.Size([256, 232, 14, 14])
module.stage3.3.branch2.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.3.branch2.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.3.branch2.2: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.3.branch2.3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.3.branch2.4: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.3.branch2.5: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.3.branch2.6: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.3.branch2.7: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.3.branch2: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.3: <class 'torchvision.models.shufflenetv2.InvertedResidual'> : torch.Size([256, 232, 14, 14]) : torch.Size([256, 232, 14, 14])
module.stage3.4.branch2.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.4.branch2.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.4.branch2.2: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.4.branch2.3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.4.branch2.4: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.4.branch2.5: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.4.branch2.6: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.4.branch2.7: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.4.branch2: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.4: <class 'torchvision.models.shufflenetv2.InvertedResidual'> : torch.Size([256, 232, 14, 14]) : torch.Size([256, 232, 14, 14])
module.stage3.5.branch2.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.5.branch2.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.5.branch2.2: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.5.branch2.3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.5.branch2.4: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.5.branch2.5: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.5.branch2.6: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.5.branch2.7: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.5.branch2: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.5: <class 'torchvision.models.shufflenetv2.InvertedResidual'> : torch.Size([256, 232, 14, 14]) : torch.Size([256, 232, 14, 14])
module.stage3.6.branch2.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.6.branch2.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.6.branch2.2: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.6.branch2.3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.6.branch2.4: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.6.branch2.5: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.6.branch2.6: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.6.branch2.7: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.6.branch2: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.6: <class 'torchvision.models.shufflenetv2.InvertedResidual'> : torch.Size([256, 232, 14, 14]) : torch.Size([256, 232, 14, 14])
module.stage3.7.branch2.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.7.branch2.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.7.branch2.2: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.7.branch2.3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.7.branch2.4: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.7.branch2.5: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.7.branch2.6: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.7.branch2.7: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.7.branch2: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 116, 14, 14]) : torch.Size([256, 116, 14, 14])
module.stage3.7: <class 'torchvision.models.shufflenetv2.InvertedResidual'> : torch.Size([256, 232, 14, 14]) : torch.Size([256, 232, 14, 14])
module.stage3: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 116, 28, 28]) : torch.Size([256, 232, 14, 14])
module.stage4.0.branch1.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 232, 14, 14]) : torch.Size([256, 232, 7, 7])
module.stage4.0.branch1.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.0.branch1.2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.0.branch1.3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.0.branch1.4: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.0.branch1: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 232, 14, 14]) : torch.Size([256, 232, 7, 7])
module.stage4.0.branch2.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 232, 14, 14]) : torch.Size([256, 232, 14, 14])
module.stage4.0.branch2.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 232, 14, 14]) : torch.Size([256, 232, 14, 14])
module.stage4.0.branch2.2: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 232, 14, 14]) : torch.Size([256, 232, 14, 14])
module.stage4.0.branch2.3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 232, 14, 14]) : torch.Size([256, 232, 7, 7])
module.stage4.0.branch2.4: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.0.branch2.5: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.0.branch2.6: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.0.branch2.7: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.0.branch2: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 232, 14, 14]) : torch.Size([256, 232, 7, 7])
module.stage4.0: <class 'torchvision.models.shufflenetv2.InvertedResidual'> : torch.Size([256, 232, 14, 14]) : torch.Size([256, 464, 7, 7])
module.stage4.1.branch2.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.1.branch2.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.1.branch2.2: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.1.branch2.3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.1.branch2.4: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.1.branch2.5: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.1.branch2.6: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.1.branch2.7: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.1.branch2: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.1: <class 'torchvision.models.shufflenetv2.InvertedResidual'> : torch.Size([256, 464, 7, 7]) : torch.Size([256, 464, 7, 7])
module.stage4.2.branch2.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.2.branch2.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.2.branch2.2: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.2.branch2.3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.2.branch2.4: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.2.branch2.5: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.2.branch2.6: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.2.branch2.7: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.2.branch2: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.2: <class 'torchvision.models.shufflenetv2.InvertedResidual'> : torch.Size([256, 464, 7, 7]) : torch.Size([256, 464, 7, 7])
module.stage4.3.branch2.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.3.branch2.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.3.branch2.2: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.3.branch2.3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.3.branch2.4: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.3.branch2.5: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.3.branch2.6: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.3.branch2.7: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.3.branch2: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 232, 7, 7]) : torch.Size([256, 232, 7, 7])
module.stage4.3: <class 'torchvision.models.shufflenetv2.InvertedResidual'> : torch.Size([256, 464, 7, 7]) : torch.Size([256, 464, 7, 7])
module.stage4: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 232, 14, 14]) : torch.Size([256, 464, 7, 7])
module.conv5.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 464, 7, 7]) : torch.Size([256, 1024, 7, 7])
module.conv5.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 1024, 7, 7]) : torch.Size([256, 1024, 7, 7])
module.conv5.2: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 1024, 7, 7]) : torch.Size([256, 1024, 7, 7])
module.conv5: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 464, 7, 7]) : torch.Size([256, 1024, 7, 7])
module.fc: <class 'torch.nn.modules.linear.Linear'> : torch.Size([256, 1024]) : torch.Size([256, 1000])
module: <class 'torchvision.models.shufflenetv2.ShuffleNetV2'> : torch.Size([256, 3, 224, 224]) : torch.Size([256, 1000])
: <class 'torch.nn.parallel.data_parallel.DataParallel'> : torch.Size([256, 3, 224, 224]) : torch.Size([256, 1000])
Test: [  1/196]	Time  1.185 ( 1.185)	Loss 6.9083e+00 (6.9083e+00)	Acc@1   0.00 (  0.00)	Acc@5   1.56 (  1.56)
 *   Acc@1 0.000 Acc@5 1.562
