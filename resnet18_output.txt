=> creating model 'resnet18'
=> Dummy data is used!
module.conv1.weight torch.Size([64, 3, 7, 7])
module.bn1.weight torch.Size([64])
module.bn1.bias torch.Size([64])
module.layer1.0.conv1.weight torch.Size([64, 64, 3, 3])
module.layer1.0.bn1.weight torch.Size([64])
module.layer1.0.bn1.bias torch.Size([64])
module.layer1.0.conv2.weight torch.Size([64, 64, 3, 3])
module.layer1.0.bn2.weight torch.Size([64])
module.layer1.0.bn2.bias torch.Size([64])
module.layer1.1.conv1.weight torch.Size([64, 64, 3, 3])
module.layer1.1.bn1.weight torch.Size([64])
module.layer1.1.bn1.bias torch.Size([64])
module.layer1.1.conv2.weight torch.Size([64, 64, 3, 3])
module.layer1.1.bn2.weight torch.Size([64])
module.layer1.1.bn2.bias torch.Size([64])
module.layer2.0.conv1.weight torch.Size([128, 64, 3, 3])
module.layer2.0.bn1.weight torch.Size([128])
module.layer2.0.bn1.bias torch.Size([128])
module.layer2.0.conv2.weight torch.Size([128, 128, 3, 3])
module.layer2.0.bn2.weight torch.Size([128])
module.layer2.0.bn2.bias torch.Size([128])
module.layer2.0.downsample.0.weight torch.Size([128, 64, 1, 1])
module.layer2.0.downsample.1.weight torch.Size([128])
module.layer2.0.downsample.1.bias torch.Size([128])
module.layer2.1.conv1.weight torch.Size([128, 128, 3, 3])
module.layer2.1.bn1.weight torch.Size([128])
module.layer2.1.bn1.bias torch.Size([128])
module.layer2.1.conv2.weight torch.Size([128, 128, 3, 3])
module.layer2.1.bn2.weight torch.Size([128])
module.layer2.1.bn2.bias torch.Size([128])
module.layer3.0.conv1.weight torch.Size([256, 128, 3, 3])
module.layer3.0.bn1.weight torch.Size([256])
module.layer3.0.bn1.bias torch.Size([256])
module.layer3.0.conv2.weight torch.Size([256, 256, 3, 3])
module.layer3.0.bn2.weight torch.Size([256])
module.layer3.0.bn2.bias torch.Size([256])
module.layer3.0.downsample.0.weight torch.Size([256, 128, 1, 1])
module.layer3.0.downsample.1.weight torch.Size([256])
module.layer3.0.downsample.1.bias torch.Size([256])
module.layer3.1.conv1.weight torch.Size([256, 256, 3, 3])
module.layer3.1.bn1.weight torch.Size([256])
module.layer3.1.bn1.bias torch.Size([256])
module.layer3.1.conv2.weight torch.Size([256, 256, 3, 3])
module.layer3.1.bn2.weight torch.Size([256])
module.layer3.1.bn2.bias torch.Size([256])
module.layer4.0.conv1.weight torch.Size([512, 256, 3, 3])
module.layer4.0.bn1.weight torch.Size([512])
module.layer4.0.bn1.bias torch.Size([512])
module.layer4.0.conv2.weight torch.Size([512, 512, 3, 3])
module.layer4.0.bn2.weight torch.Size([512])
module.layer4.0.bn2.bias torch.Size([512])
module.layer4.0.downsample.0.weight torch.Size([512, 256, 1, 1])
module.layer4.0.downsample.1.weight torch.Size([512])
module.layer4.0.downsample.1.bias torch.Size([512])
module.layer4.1.conv1.weight torch.Size([512, 512, 3, 3])
module.layer4.1.bn1.weight torch.Size([512])
module.layer4.1.bn1.bias torch.Size([512])
module.layer4.1.conv2.weight torch.Size([512, 512, 3, 3])
module.layer4.1.bn2.weight torch.Size([512])
module.layer4.1.bn2.bias torch.Size([512])
module.fc.weight torch.Size([1000, 512])
module.fc.bias torch.Size([1000])
VE: model DataParallel(
  (module): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Linear(in_features=512, out_features=1000, bias=True)
  )
)
module.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 3, 224, 224]) : torch.Size([256, 64, 112, 112])
module.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 64, 112, 112]) : torch.Size([256, 64, 112, 112])
module.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 64, 112, 112]) : torch.Size([256, 64, 112, 112])
module.maxpool: <class 'torch.nn.modules.pooling.MaxPool2d'> : torch.Size([256, 64, 112, 112]) : torch.Size([256, 64, 56, 56])
module.layer1.0.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 64, 56, 56]) : torch.Size([256, 64, 56, 56])
module.layer1.0.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 64, 56, 56]) : torch.Size([256, 64, 56, 56])
module.layer1.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 64, 56, 56]) : torch.Size([256, 64, 56, 56])
module.layer1.0.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 64, 56, 56]) : torch.Size([256, 64, 56, 56])
module.layer1.0.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 64, 56, 56]) : torch.Size([256, 64, 56, 56])
module.layer1.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 64, 56, 56]) : torch.Size([256, 64, 56, 56])
module.layer1.0: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([256, 64, 56, 56]) : torch.Size([256, 64, 56, 56])
module.layer1.1.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 64, 56, 56]) : torch.Size([256, 64, 56, 56])
module.layer1.1.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 64, 56, 56]) : torch.Size([256, 64, 56, 56])
module.layer1.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 64, 56, 56]) : torch.Size([256, 64, 56, 56])
module.layer1.1.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 64, 56, 56]) : torch.Size([256, 64, 56, 56])
module.layer1.1.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 64, 56, 56]) : torch.Size([256, 64, 56, 56])
module.layer1.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 64, 56, 56]) : torch.Size([256, 64, 56, 56])
module.layer1.1: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([256, 64, 56, 56]) : torch.Size([256, 64, 56, 56])
module.layer1: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 64, 56, 56]) : torch.Size([256, 64, 56, 56])
module.layer2.0.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 64, 56, 56]) : torch.Size([256, 128, 28, 28])
module.layer2.0.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 128, 28, 28]) : torch.Size([256, 128, 28, 28])
module.layer2.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 128, 28, 28]) : torch.Size([256, 128, 28, 28])
module.layer2.0.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 128, 28, 28]) : torch.Size([256, 128, 28, 28])
module.layer2.0.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 128, 28, 28]) : torch.Size([256, 128, 28, 28])
module.layer2.0.downsample.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 64, 56, 56]) : torch.Size([256, 128, 28, 28])
module.layer2.0.downsample.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 128, 28, 28]) : torch.Size([256, 128, 28, 28])
module.layer2.0.downsample: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 64, 56, 56]) : torch.Size([256, 128, 28, 28])
module.layer2.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 128, 28, 28]) : torch.Size([256, 128, 28, 28])
module.layer2.0: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([256, 64, 56, 56]) : torch.Size([256, 128, 28, 28])
module.layer2.1.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 128, 28, 28]) : torch.Size([256, 128, 28, 28])
module.layer2.1.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 128, 28, 28]) : torch.Size([256, 128, 28, 28])
module.layer2.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 128, 28, 28]) : torch.Size([256, 128, 28, 28])
module.layer2.1.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 128, 28, 28]) : torch.Size([256, 128, 28, 28])
module.layer2.1.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 128, 28, 28]) : torch.Size([256, 128, 28, 28])
module.layer2.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 128, 28, 28]) : torch.Size([256, 128, 28, 28])
module.layer2.1: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([256, 128, 28, 28]) : torch.Size([256, 128, 28, 28])
module.layer2: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 64, 56, 56]) : torch.Size([256, 128, 28, 28])
module.layer3.0.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 128, 28, 28]) : torch.Size([256, 256, 14, 14])
module.layer3.0.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 256, 14, 14]) : torch.Size([256, 256, 14, 14])
module.layer3.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 256, 14, 14]) : torch.Size([256, 256, 14, 14])
module.layer3.0.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 256, 14, 14]) : torch.Size([256, 256, 14, 14])
module.layer3.0.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 256, 14, 14]) : torch.Size([256, 256, 14, 14])
module.layer3.0.downsample.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 128, 28, 28]) : torch.Size([256, 256, 14, 14])
module.layer3.0.downsample.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 256, 14, 14]) : torch.Size([256, 256, 14, 14])
module.layer3.0.downsample: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 128, 28, 28]) : torch.Size([256, 256, 14, 14])
module.layer3.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 256, 14, 14]) : torch.Size([256, 256, 14, 14])
module.layer3.0: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([256, 128, 28, 28]) : torch.Size([256, 256, 14, 14])
module.layer3.1.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 256, 14, 14]) : torch.Size([256, 256, 14, 14])
module.layer3.1.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 256, 14, 14]) : torch.Size([256, 256, 14, 14])
module.layer3.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 256, 14, 14]) : torch.Size([256, 256, 14, 14])
module.layer3.1.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 256, 14, 14]) : torch.Size([256, 256, 14, 14])
module.layer3.1.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 256, 14, 14]) : torch.Size([256, 256, 14, 14])
module.layer3.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 256, 14, 14]) : torch.Size([256, 256, 14, 14])
module.layer3.1: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([256, 256, 14, 14]) : torch.Size([256, 256, 14, 14])
module.layer3: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 128, 28, 28]) : torch.Size([256, 256, 14, 14])
module.layer4.0.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 256, 14, 14]) : torch.Size([256, 512, 7, 7])
module.layer4.0.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 512, 7, 7]) : torch.Size([256, 512, 7, 7])
module.layer4.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 512, 7, 7]) : torch.Size([256, 512, 7, 7])
module.layer4.0.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 512, 7, 7]) : torch.Size([256, 512, 7, 7])
module.layer4.0.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 512, 7, 7]) : torch.Size([256, 512, 7, 7])
module.layer4.0.downsample.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 256, 14, 14]) : torch.Size([256, 512, 7, 7])
module.layer4.0.downsample.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 512, 7, 7]) : torch.Size([256, 512, 7, 7])
module.layer4.0.downsample: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 256, 14, 14]) : torch.Size([256, 512, 7, 7])
module.layer4.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 512, 7, 7]) : torch.Size([256, 512, 7, 7])
module.layer4.0: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([256, 256, 14, 14]) : torch.Size([256, 512, 7, 7])
module.layer4.1.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 512, 7, 7]) : torch.Size([256, 512, 7, 7])
module.layer4.1.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 512, 7, 7]) : torch.Size([256, 512, 7, 7])
module.layer4.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 512, 7, 7]) : torch.Size([256, 512, 7, 7])
module.layer4.1.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 512, 7, 7]) : torch.Size([256, 512, 7, 7])
module.layer4.1.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 512, 7, 7]) : torch.Size([256, 512, 7, 7])
module.layer4.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 512, 7, 7]) : torch.Size([256, 512, 7, 7])
module.layer4.1: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([256, 512, 7, 7]) : torch.Size([256, 512, 7, 7])
module.layer4: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 256, 14, 14]) : torch.Size([256, 512, 7, 7])
module.avgpool: <class 'torch.nn.modules.pooling.AdaptiveAvgPool2d'> : torch.Size([256, 512, 7, 7]) : torch.Size([256, 512, 1, 1])
module.fc: <class 'torch.nn.modules.linear.Linear'> : torch.Size([256, 512]) : torch.Size([256, 1000])
module: <class 'torchvision.models.resnet.ResNet'> : torch.Size([256, 3, 224, 224]) : torch.Size([256, 1000])
: <class 'torch.nn.parallel.data_parallel.DataParallel'> : torch.Size([256, 3, 224, 224]) : torch.Size([256, 1000])
Epoch: [0][   1/5005]	Time 18.394 (18.394)	Data  1.785 ( 1.785)	Loss 7.0762e+00 (7.0762e+00)	Acc@1   0.00 (  0.00)	Acc@5   0.39 (  0.39)
module.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 3, 224, 224]) : torch.Size([256, 64, 112, 112])
module.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 64, 112, 112]) : torch.Size([256, 64, 112, 112])
module.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 64, 112, 112]) : torch.Size([256, 64, 112, 112])
module.maxpool: <class 'torch.nn.modules.pooling.MaxPool2d'> : torch.Size([256, 64, 112, 112]) : torch.Size([256, 64, 56, 56])
module.layer1.0.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 64, 56, 56]) : torch.Size([256, 64, 56, 56])
module.layer1.0.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 64, 56, 56]) : torch.Size([256, 64, 56, 56])
module.layer1.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 64, 56, 56]) : torch.Size([256, 64, 56, 56])
module.layer1.0.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 64, 56, 56]) : torch.Size([256, 64, 56, 56])
module.layer1.0.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 64, 56, 56]) : torch.Size([256, 64, 56, 56])
module.layer1.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 64, 56, 56]) : torch.Size([256, 64, 56, 56])
module.layer1.0: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([256, 64, 56, 56]) : torch.Size([256, 64, 56, 56])
module.layer1.1.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 64, 56, 56]) : torch.Size([256, 64, 56, 56])
module.layer1.1.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 64, 56, 56]) : torch.Size([256, 64, 56, 56])
module.layer1.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 64, 56, 56]) : torch.Size([256, 64, 56, 56])
module.layer1.1.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 64, 56, 56]) : torch.Size([256, 64, 56, 56])
module.layer1.1.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 64, 56, 56]) : torch.Size([256, 64, 56, 56])
module.layer1.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 64, 56, 56]) : torch.Size([256, 64, 56, 56])
module.layer1.1: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([256, 64, 56, 56]) : torch.Size([256, 64, 56, 56])
module.layer1: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 64, 56, 56]) : torch.Size([256, 64, 56, 56])
module.layer2.0.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 64, 56, 56]) : torch.Size([256, 128, 28, 28])
module.layer2.0.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 128, 28, 28]) : torch.Size([256, 128, 28, 28])
module.layer2.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 128, 28, 28]) : torch.Size([256, 128, 28, 28])
module.layer2.0.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 128, 28, 28]) : torch.Size([256, 128, 28, 28])
module.layer2.0.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 128, 28, 28]) : torch.Size([256, 128, 28, 28])
module.layer2.0.downsample.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 64, 56, 56]) : torch.Size([256, 128, 28, 28])
module.layer2.0.downsample.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 128, 28, 28]) : torch.Size([256, 128, 28, 28])
module.layer2.0.downsample: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 64, 56, 56]) : torch.Size([256, 128, 28, 28])
module.layer2.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 128, 28, 28]) : torch.Size([256, 128, 28, 28])
module.layer2.0: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([256, 64, 56, 56]) : torch.Size([256, 128, 28, 28])
module.layer2.1.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 128, 28, 28]) : torch.Size([256, 128, 28, 28])
module.layer2.1.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 128, 28, 28]) : torch.Size([256, 128, 28, 28])
module.layer2.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 128, 28, 28]) : torch.Size([256, 128, 28, 28])
module.layer2.1.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 128, 28, 28]) : torch.Size([256, 128, 28, 28])
module.layer2.1.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 128, 28, 28]) : torch.Size([256, 128, 28, 28])
module.layer2.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 128, 28, 28]) : torch.Size([256, 128, 28, 28])
module.layer2.1: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([256, 128, 28, 28]) : torch.Size([256, 128, 28, 28])
module.layer2: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 64, 56, 56]) : torch.Size([256, 128, 28, 28])
module.layer3.0.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 128, 28, 28]) : torch.Size([256, 256, 14, 14])
module.layer3.0.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 256, 14, 14]) : torch.Size([256, 256, 14, 14])
module.layer3.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 256, 14, 14]) : torch.Size([256, 256, 14, 14])
module.layer3.0.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 256, 14, 14]) : torch.Size([256, 256, 14, 14])
module.layer3.0.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 256, 14, 14]) : torch.Size([256, 256, 14, 14])
module.layer3.0.downsample.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 128, 28, 28]) : torch.Size([256, 256, 14, 14])
module.layer3.0.downsample.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 256, 14, 14]) : torch.Size([256, 256, 14, 14])
module.layer3.0.downsample: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 128, 28, 28]) : torch.Size([256, 256, 14, 14])
module.layer3.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 256, 14, 14]) : torch.Size([256, 256, 14, 14])
module.layer3.0: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([256, 128, 28, 28]) : torch.Size([256, 256, 14, 14])
module.layer3.1.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 256, 14, 14]) : torch.Size([256, 256, 14, 14])
module.layer3.1.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 256, 14, 14]) : torch.Size([256, 256, 14, 14])
module.layer3.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 256, 14, 14]) : torch.Size([256, 256, 14, 14])
module.layer3.1.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 256, 14, 14]) : torch.Size([256, 256, 14, 14])
module.layer3.1.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 256, 14, 14]) : torch.Size([256, 256, 14, 14])
module.layer3.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 256, 14, 14]) : torch.Size([256, 256, 14, 14])
module.layer3.1: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([256, 256, 14, 14]) : torch.Size([256, 256, 14, 14])
module.layer3: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 128, 28, 28]) : torch.Size([256, 256, 14, 14])
module.layer4.0.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 256, 14, 14]) : torch.Size([256, 512, 7, 7])
module.layer4.0.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 512, 7, 7]) : torch.Size([256, 512, 7, 7])
module.layer4.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 512, 7, 7]) : torch.Size([256, 512, 7, 7])
module.layer4.0.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 512, 7, 7]) : torch.Size([256, 512, 7, 7])
module.layer4.0.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 512, 7, 7]) : torch.Size([256, 512, 7, 7])
module.layer4.0.downsample.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 256, 14, 14]) : torch.Size([256, 512, 7, 7])
module.layer4.0.downsample.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 512, 7, 7]) : torch.Size([256, 512, 7, 7])
module.layer4.0.downsample: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 256, 14, 14]) : torch.Size([256, 512, 7, 7])
module.layer4.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 512, 7, 7]) : torch.Size([256, 512, 7, 7])
module.layer4.0: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([256, 256, 14, 14]) : torch.Size([256, 512, 7, 7])
module.layer4.1.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 512, 7, 7]) : torch.Size([256, 512, 7, 7])
module.layer4.1.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 512, 7, 7]) : torch.Size([256, 512, 7, 7])
module.layer4.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 512, 7, 7]) : torch.Size([256, 512, 7, 7])
module.layer4.1.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 512, 7, 7]) : torch.Size([256, 512, 7, 7])
module.layer4.1.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([256, 512, 7, 7]) : torch.Size([256, 512, 7, 7])
module.layer4.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 512, 7, 7]) : torch.Size([256, 512, 7, 7])
module.layer4.1: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([256, 512, 7, 7]) : torch.Size([256, 512, 7, 7])
module.layer4: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 256, 14, 14]) : torch.Size([256, 512, 7, 7])
module.avgpool: <class 'torch.nn.modules.pooling.AdaptiveAvgPool2d'> : torch.Size([256, 512, 7, 7]) : torch.Size([256, 512, 1, 1])
module.fc: <class 'torch.nn.modules.linear.Linear'> : torch.Size([256, 512]) : torch.Size([256, 1000])
module: <class 'torchvision.models.resnet.ResNet'> : torch.Size([256, 3, 224, 224]) : torch.Size([256, 1000])
: <class 'torch.nn.parallel.data_parallel.DataParallel'> : torch.Size([256, 3, 224, 224]) : torch.Size([256, 1000])
Test: [  1/196]	Time  1.193 ( 1.193)	Loss 6.9312e+00 (6.9312e+00)	Acc@1   0.00 (  0.00)	Acc@5   1.56 (  1.56)
 *   Acc@1 0.000 Acc@5 1.562
